version: '3.8'

services:
  # =============================================================================
  # Cartonization Service
  # =============================================================================
  cartonization-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cartonization-service
    ports:
      - "8080:8080"
    environment:
      # Spring Profiles
      SPRING_PROFILES_ACTIVE: docker
      
      # Database Configuration
      SPRING_DATA_MONGODB_URI: mongodb://cartonization_user:cartonization_pass@mongodb:27017/cartonization
      
      # Redis Configuration  
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: redis123
      
      # Kafka Configuration
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      
      # Product Catalog Integration
      PRODUCT_CATALOG_BASE_URL: http://product-catalog-mock:1080
      
      # Application Configuration
      SERVER_PORT: 8080
      LOGGING_LEVEL_COM_PAKLOG_CARTONIZATION: INFO
      
      # JVM Configuration
      JAVA_OPTS: >-
        -XX:+UseContainerSupport
        -XX:MaxRAMPercentage=75.0
        -XX:+UseG1GC
        -XX:+UseStringDeduplication
        -Djava.security.egd=file:/dev/./urandom
        -Dspring.profiles.active=docker
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - cartonization-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # =============================================================================
  # MongoDB Database
  # =============================================================================
  mongodb:
    image: mongo:7.0
    container_name: cartonization-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: cartonization
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - cartonization-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # =============================================================================
  # Redis Cache
  # =============================================================================
  redis:
    image: redis:7.2-alpine
    container_name: cartonization-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    networks:
      - cartonization-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "redis123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # Apache Kafka
  # =============================================================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: cartonization-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - cartonization-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: cartonization-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - cartonization-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29092"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  # =============================================================================
  # Product Catalog Mock Service
  # =============================================================================
  product-catalog-mock:
    image: mockserver/mockserver:5.15.0
    container_name: cartonization-product-catalog-mock
    ports:
      - "8082:1080"
    environment:
      MOCKSERVER_SERVER_PORT: 1080
      MOCKSERVER_LOG_LEVEL: INFO
    volumes:
      - ./docker/mockserver/expectations.json:/opt/mockserver/expectations.json
    command: -serverPort 1080 -logLevel INFO
    networks:
      - cartonization-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1080/mockserver/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Monitoring and Management
  # =============================================================================
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: cartonization-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: cartonization-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - cartonization-network
    restart: unless-stopped

  mongodb-express:
    image: mongo-express:1.0.0
    container_name: cartonization-mongodb-express
    depends_on:
      mongodb:
        condition: service_healthy
    ports:
      - "8086:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    networks:
      - cartonization-network
    restart: unless-stopped

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cartonization-redis-commander
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8087:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis123
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    networks:
      - cartonization-network
    restart: unless-stopped

# =============================================================================
# Networks
# =============================================================================
networks:
  cartonization-network:
    driver: bridge
    name: cartonization-network

# =============================================================================
# Volumes
# =============================================================================
volumes:
  mongodb_data:
    name: cartonization_mongodb_data
  redis_data:
    name: cartonization_redis_data
  kafka_data:
    name: cartonization_kafka_data
  zookeeper_data:
    name: cartonization_zookeeper_data
  zookeeper_logs:
    name: cartonization_zookeeper_logs